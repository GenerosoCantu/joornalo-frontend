{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\DEVELOPMENT\\\\joornalo-frontend\\\\front.joornalo\\\\context\\\\config\\\\configState.js\";\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport ConfigContext from './configContext';\nimport ConfigReducer from './configReducer';\nimport { GET_AGENT, REMOVE_ALERT } from '../types';\n\nconst ConfigState = props => {\n  const initialState = {\n    agent: 'ok'\n  };\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(ConfigReducer, initialState);\n\n  const initialAgent = () => {\n    let userAgent;\n\n    if (false) {\n      userAgent = navigator.userAgent;\n    } else {\n      userAgent = context.req.headers['user-agent'];\n    }\n\n    const mobilex = userAgent.match(/(Mobile)/g);\n    const android = userAgent.match(/(Android)/g);\n    const iPad = userAgent.match(/(iPad)/g);\n    const mobile = Boolean(mobilex) && !iPad;\n    const tablet = !mobilex && Boolean(android) || Boolean(iPad);\n    const desktop = !mobile && !tablet;\n    const agent = desktop || tablet ? 'desktop' : 'mobile';\n    console.log('agent----------------------');\n    console.log(agent);\n    return agent;\n  }; // Set Alert\n\n\n  const getAgent = (msg, type) => {\n    dispatch({\n      type: GET_AGENT,\n      payload: {\n        agent: 'ok'\n      }\n    });\n  };\n\n  return __jsx(ConfigContext.Provider, {\n    value: {\n      config: state,\n      getAgent\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ConfigState;","map":{"version":3,"sources":["C:/Projects/DEVELOPMENT/joornalo-frontend/front.joornalo/context/config/configState.js"],"names":["React","useReducer","ConfigContext","ConfigReducer","GET_AGENT","REMOVE_ALERT","ConfigState","props","initialState","agent","state","dispatch","initialAgent","userAgent","navigator","context","req","headers","mobilex","match","android","iPad","mobile","Boolean","tablet","desktop","console","log","getAgent","msg","type","payload","config","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,UAAxC;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAE3B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,KAAK,EAAE;AADY,GAArB;AAIA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBV,UAAU,CAACE,aAAD,EAAgBK,YAAhB,CAApC;;AAGA,QAAMI,YAAY,GAAG,MAAM;AAEzB,QAAIC,SAAJ;;AACA,eAAqB;AACnBA,MAAAA,SAAS,GAAGC,SAAS,CAACD,SAAtB;AACD,KAFD,MAEO;AACLA,MAAAA,SAAS,GAAGE,OAAO,CAACC,GAAR,CAAYC,OAAZ,CAAoB,YAApB,CAAZ;AACD;;AAED,UAAMC,OAAO,GAAGL,SAAS,CAACM,KAAV,CAAgB,WAAhB,CAAhB;AACA,UAAMC,OAAO,GAAGP,SAAS,CAACM,KAAV,CAAgB,YAAhB,CAAhB;AACA,UAAME,IAAI,GAAGR,SAAS,CAACM,KAAV,CAAgB,SAAhB,CAAb;AAEA,UAAMG,MAAM,GAAGC,OAAO,CAACL,OAAD,CAAP,IAAoB,CAACG,IAApC;AACA,UAAMG,MAAM,GAAI,CAACN,OAAD,IAAYK,OAAO,CAACH,OAAD,CAApB,IAAkCG,OAAO,CAACF,IAAD,CAAxD;AACA,UAAMI,OAAO,GAAG,CAACH,MAAD,IAAW,CAACE,MAA5B;AAEA,UAAMf,KAAK,GAAKgB,OAAO,IAAID,MAAZ,GAAsB,SAAtB,GAAkC,QAAjD;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ;AAEA,WAAOA,KAAP;AACD,GAtBD,CAT2B,CAiC3B;;;AACA,QAAMmB,QAAQ,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AAE9BnB,IAAAA,QAAQ,CAAC;AACPmB,MAAAA,IAAI,EAAE1B,SADC;AAEP2B,MAAAA,OAAO,EAAE;AAAEtB,QAAAA,KAAK,EAAE;AAAT;AAFF,KAAD,CAAR;AAKD,GAPD;;AASA,SACE,MAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLuB,MAAAA,MAAM,EAAEtB,KADH;AAELkB,MAAAA;AAFK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGrB,KAAK,CAAC0B,QANT,CADF;AAUD,CArDD;;AAuDA,eAAe3B,WAAf","sourcesContent":["import React, { useReducer } from 'react';\r\nimport ConfigContext from './configContext';\r\nimport ConfigReducer from './configReducer';\r\nimport { GET_AGENT, REMOVE_ALERT } from '../types';\r\n\r\nconst ConfigState = props => {\r\n\r\n  const initialState = {\r\n    agent: 'ok'\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(ConfigReducer, initialState);\r\n\r\n\r\n  const initialAgent = () => {\r\n\r\n    let userAgent\r\n    if (process.browser) {\r\n      userAgent = navigator.userAgent\r\n    } else {\r\n      userAgent = context.req.headers['user-agent']\r\n    }\r\n\r\n    const mobilex = userAgent.match(/(Mobile)/g);\r\n    const android = userAgent.match(/(Android)/g);\r\n    const iPad = userAgent.match(/(iPad)/g);\r\n\r\n    const mobile = Boolean(mobilex) && !iPad;\r\n    const tablet = (!mobilex && Boolean(android)) || Boolean(iPad);\r\n    const desktop = !mobile && !tablet;\r\n\r\n    const agent = ((desktop || tablet) ? 'desktop' : 'mobile');\r\n    console.log('agent----------------------');\r\n    console.log(agent);\r\n\r\n    return agent;\r\n  };\r\n\r\n  // Set Alert\r\n  const getAgent = (msg, type) => {\r\n\r\n    dispatch({\r\n      type: GET_AGENT,\r\n      payload: { agent: 'ok' }\r\n    });\r\n\r\n  };\r\n\r\n  return (\r\n    <ConfigContext.Provider\r\n      value={{\r\n        config: state,\r\n        getAgent\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ConfigContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ConfigState;\r\n"]},"metadata":{},"sourceType":"module"}