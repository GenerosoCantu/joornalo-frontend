{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_NEWS, SET_LOADING, ADD_TEMPLATE, NEWS_ERROR, GET_CONFIG, GET_OTHERNEWS } from '../types';\nconst initialState = {\n  agent: null,\n  config: null,\n  news: null,\n  templates: null,\n  template: null,\n  templateName: null,\n  front: null,\n  loading: false,\n  agent: null,\n  error: null,\n  topNews: null,\n  moreNews: null\n};\nexport default ((state = initialState, action) => {\n  // console.log(action.type);\n  switch (action.type) {\n    case GET_NEWS:\n      return _objectSpread({}, state, {\n        news: action.payload.news,\n        templateName: action.payload.templateName,\n        template: action.payload.template,\n        error: false,\n        loading: false\n      });\n\n    case NEWS_ERROR:\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    case SET_LOADING:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case GET_CONFIG:\n      return _objectSpread({}, state, {\n        config: action.payload.config,\n        templates: action.payload.templates,\n        agent: action.payload.agent\n      });\n\n    case ADD_TEMPLATE:\n      return _objectSpread({}, state, {\n        templates: _Object$assign(state.templates, action.payload.template)\n      });\n\n    case GET_OTHERNEWS:\n      return _objectSpread({}, state, {\n        topNews: action.payload.topNews,\n        moreNews: action.payload.moreNews\n      });\n\n    default:\n      return state;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}