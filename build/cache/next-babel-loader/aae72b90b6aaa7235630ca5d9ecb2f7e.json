{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport store from '../../pages/store';\nimport { GET_NEWS, SET_LOADING, ADD_TEMPLATE, NEWS_ERROR, INIT_AGENT, GET_CONFIG, GET_OTHERNEWS } from '../types';\nimport { initAgent, test } from '../../services/configService';\nimport axios from 'axios';\nimport Parser from 'html-react-parser';\n\nconst getTemplate = async (req, template, agent) => {\n  try {\n    setLoading();\n    const tmpl = agent + '-' + template;\n    const templateUrl = `https://data.joornalo.com/templates/news/${tmpl}.json`;\n    const res = await axios.get(templateUrl);\n    return res.data;\n  } catch (err) {\n    console.log('***********Template Error');\n    dispatch({\n      type: NEWS_ERROR,\n      payload: err.statusText\n    });\n  }\n};\n\nexport const getOtherNews = section => async (dispatch, getState) => {\n  try {\n    setLoading();\n    const moreUrl = `https://data.joornalo.com/news/${section}-more-news.json`;\n    const res = await axios.get(moreUrl);\n    dispatch({\n      type: GET_OTHERNEWS,\n      payload: {\n        topNews: res.data.topNews,\n        moreNews: res.data.moreNews\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: NEWS_ERROR,\n      payload: 'NotFound'\n    });\n  }\n};\nexport const getNews = (section, date, uuid, url, req) => async (dispatch, getState) => {\n  try {\n    setLoading();\n    const path = `https://data.joornalo.com/news/${uuid.charAt(0)}/${uuid.charAt(1)}/${uuid}.json`;\n    const res = await axios.get(path);\n\n    if (url !== res.data['url']) {\n      dispatch({\n        type: NEWS_ERROR,\n        payload: `Redirect: ${res.data['url']}`\n      });\n    }\n\n    const agent = getState().news.agent;\n    const tmpl = agent + '-' + res.data['template'];\n    let template = getState().news.templates[tmpl];\n\n    if (!template) {\n      template = await getTemplate(req, res.data['template'], getState().news.agent);\n      dispatch({\n        type: ADD_TEMPLATE,\n        payload: {\n          template: {\n            [tmpl]: template\n          }\n        }\n      });\n    } // let tmp = unescape(res.data.text);\n    // let find = tmp.split('<embed id=\"');\n    // for (let i = find.length - 1; i--;) {\n    //   let mediaNum = parseInt(find[i + 1].charAt(0));\n    //   if (res.data.media[mediaNum - 1]) {\n    //     find[i + 1] = '<div class=\"embed\">' + res.data.media[mediaNum - 1].embed + '</div>' + find[i + 1].substring(5);\n    //   } else {\n    //     find[i + 1] = find[i + 1].substring(5);\n    //   }\n    // }\n    // tmp = find.join('');\n    // find = tmp.split('<image id=\"');\n    // for (let i = find.length - 1; i--;) {\n    //   let imageNum = parseInt(find[i + 1].charAt(0));\n    //   if (res.data.images[imageNum - 1]) {\n    //     find[i + 1] = '<img src=\"https://data.joornalo.com/news/4/c/' + res.data.images[imageNum - 1].url + '\" />' + find[i + 1].substring(5);\n    //   } else {\n    //     find[i + 1] = find[i + 1].substring(5);\n    //   }\n    // }\n    // res.data.modText = Parser(find.join(''));\n    // res.data.mainImgUrl = 'https://data.joornalo.com/news/4/c/' + res.data.images[0].url;\n    //console.log(data);\n\n\n    dispatch({\n      type: GET_NEWS,\n      payload: {\n        news: res.data,\n        templateName: 'template-' + res.data['template'],\n        template: template\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: NEWS_ERROR,\n      payload: 'NotFound'\n    });\n  }\n}; // Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};\nexport const getConfig = req => async dispatch => {\n  try {\n    const configUrl = `https://data.joornalo.com/config.json`;\n    const templatesUrl = `https://data.joornalo.com/templates/news/templates.json`;\n    const [config, templates, agent] = await _Promise.all([axios.get(configUrl), axios.get(templatesUrl), initAgent(req)]);\n    dispatch({\n      type: GET_CONFIG,\n      payload: {\n        config: config.data,\n        templates: templates.data,\n        agent: agent\n      }\n    });\n  } catch (err) {// dispatch({\n    //   type: NEWS_ERROR,\n    //   payload: 'NotFound'\n    // });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}